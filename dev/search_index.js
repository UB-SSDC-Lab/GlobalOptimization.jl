var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GlobalOptimization","category":"page"},{"location":"#GlobalOptimization","page":"Home","title":"GlobalOptimization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GlobalOptimization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GlobalOptimization]","category":"page"},{"location":"#GlobalOptimization.AbstractAlgorithmSpecificOptions","page":"Home","title":"GlobalOptimization.AbstractAlgorithmSpecificOptions","text":"AbstractAlgorithmSpecificOptions\n\nAbstract type for algorithm specific options\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractCandidate","page":"Home","title":"GlobalOptimization.AbstractCandidate","text":"AbstractCandidate\n\nAbstract type for a candidate\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractEvaluator","page":"Home","title":"GlobalOptimization.AbstractEvaluator","text":"AbstractEvaluator\n\nAbstract type for an evaluator. An evaluator is responsible for evaluating the fitness of a population or candidate.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractOptimizationProblem","page":"Home","title":"GlobalOptimization.AbstractOptimizationProblem","text":"AbstractOptimizationProblem\n\nAbstract type for optimization problems.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractOptimizer","page":"Home","title":"GlobalOptimization.AbstractOptimizer","text":"AbstractOptimizer\n\nAbstract type of all optimization algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractOptions","page":"Home","title":"GlobalOptimization.AbstractOptions","text":"AbstractOptions\n\nAbstract type for multiple options\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AbstractPopulation","page":"Home","title":"GlobalOptimization.AbstractPopulation","text":"AbstractPopulation\n\nAbstract type for a population of candidates.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.AsyncEvaluator","page":"Home","title":"GlobalOptimization.AsyncEvaluator","text":"AsyncEvaluator\n\nAbstract type for an evaluator that evaluates the fitness of a single candidate asyncronously.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.BasicCandidate","page":"Home","title":"GlobalOptimization.BasicCandidate","text":"BasicCandidate\n\nA basic candidate that knows who it is and its fitness\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.BasicEvaluator","page":"Home","title":"GlobalOptimization.BasicEvaluator","text":"BasicEvaluator\n\nA basic evaluator that computes the fitness of a single candidate. \n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.BatchEvaluator","page":"Home","title":"GlobalOptimization.BatchEvaluator","text":"BatchEvaluator\n\nAbstract type for an evaluator that evaluates the fitness of an entire population.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.ContinuousRectangularSearchSpace","page":"Home","title":"GlobalOptimization.ContinuousRectangularSearchSpace","text":"ContinuousRectangularSearchSpace\n\nA RectangularSearchSpace formed by a single continuous set.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.FitnessAwareCandidate","page":"Home","title":"GlobalOptimization.FitnessAwareCandidate","text":"FitnessAwareCandidate\n\nAbstract type for a candidate that knows (or at least has the ability to know) its fitness.\n\nNote: Name was selected to leave room for subtypes of AbstractCandidate that are not aware of their fitness (i.e., just a vector representing the candidate)\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.FixedDimensionSearchSpace","page":"Home","title":"GlobalOptimization.FixedDimensionSearchSpace","text":"FixedDimensionSearchSpace\n\nThe base abstract type for a search space with a fixed finite number of dimensions. Applicable to the vast majority of optimization problems.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.GeneralOptions","page":"Home","title":"GlobalOptimization.GeneralOptions","text":"GeneralOptions{display, function_value_check}\n\nGeneral options for all optimizers\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.OptimizationProblem","page":"Home","title":"GlobalOptimization.OptimizationProblem","text":"OptimizationProblem\n\nAn optimization problem. Contains the objective function and search space.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.OptimizationProblem-Union{Tuple{F}, Tuple{F, AbstractVector{<:Real}, AbstractVector{<:Real}}} where F<:Function","page":"Home","title":"GlobalOptimization.OptimizationProblem","text":"OptimizationProblem(f, LB, UB)\n\nConstructs an optimization problem with objective function f and a  ContinuousRectangularSearchSpace defined by LB and UB.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.PSO","page":"Home","title":"GlobalOptimization.PSO","text":"PSO\n\nParticle Swarm Optimization (PSO) algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.PSOCache","page":"Home","title":"GlobalOptimization.PSOCache","text":"PSOCache\n\nCache for PSO algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.PSOOptions","page":"Home","title":"GlobalOptimization.PSOOptions","text":"PSOOptions <: AbstractAlgorithmSpecificOptions\n\nOptions for the PSO algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.RectangularSearchSpace","page":"Home","title":"GlobalOptimization.RectangularSearchSpace","text":"RectangularSearchSpace\n\nA FixedDimensionSearchSpace with N dimensional rectangle as the set of feasible points.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.Results","page":"Home","title":"GlobalOptimization.Results","text":"Results\n\nA simple struct for returning results.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.SearchSpace","page":"Home","title":"GlobalOptimization.SearchSpace","text":"SearchSpace\n\nThe base abstract type for a Problem search space. \n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.SerialBatchEvaluator","page":"Home","title":"GlobalOptimization.SerialBatchEvaluator","text":"SerialBatchEvaluator\n\nAn evaluator that evaluates the fitness of a population in serial.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.SingleEvaluator","page":"Home","title":"GlobalOptimization.SingleEvaluator","text":"SingleEvaluator\n\nAbstract type for an evaluator that evaluates the fitness of a single candidate\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.Swarm","page":"Home","title":"GlobalOptimization.Swarm","text":"Swarm{T <: AbstractFloat} <: AbstractPopulation\n\nA population of particles for the PSO algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.Swarm-Tuple{Integer, Integer}","page":"Home","title":"GlobalOptimization.Swarm","text":"Swarm(num_particles::Integer, num_dims::Integer)\n\nConstructs a Swarm with num_particles particles in num_dims dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.ThreadedBatchEvaluator","page":"Home","title":"GlobalOptimization.ThreadedBatchEvaluator","text":"ThreadedBatchEvaluator\n\nAn evaluator that evaluates the fitness of a population in parallel using multi-threading.\n\n\n\n\n\n","category":"type"},{"location":"#GlobalOptimization.SerialPSO-Union{Tuple{GlobalOptimization.AbstractOptimizationProblem{SS}}, Tuple{SS}, Tuple{T}} where {T<:AbstractFloat, SS<:ContinuousRectangularSearchSpace{T}}","page":"Home","title":"GlobalOptimization.SerialPSO","text":"SerialPSO(prob::AbstractOptimizationProblem{SS}; kwargs...)\n\nConstructs a serial PSO algorithm with the given options.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.Swarm_F32-Tuple{Integer, Integer}","page":"Home","title":"GlobalOptimization.Swarm_F32","text":"Swarm_F32(num_particles::Integer, num_dims::Integer)\n\nConstructs a Float32 Swarm with num_particles particles in num_dims dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.Swarm_F64-Tuple{Integer, Integer}","page":"Home","title":"GlobalOptimization.Swarm_F64","text":"Swarm_F64(num_particles::Integer, num_dims::Integer)\n\nConstructs a Float64 Swarm with num_particles particles in num_dims dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.ThreadedPSO-Union{Tuple{GlobalOptimization.AbstractOptimizationProblem{SS}}, Tuple{SS}, Tuple{T}} where {T<:AbstractFloat, SS<:ContinuousRectangularSearchSpace{T}}","page":"Home","title":"GlobalOptimization.ThreadedPSO","text":"ThreadedPSO\n\nConstructs a threaded PSO algorithm with the given options.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.candidates-Tuple{GlobalOptimization.AbstractPopulation}","page":"Home","title":"GlobalOptimization.candidates","text":"candidates(pop::AbstractPopulation, [i::Integer])\n\nReturns the candidates from a population. If i is specified, returns the i-th candidate.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.check_fitness!-Union{Tuple{FVC}, Tuple{D}, Tuple{GlobalOptimization.AbstractPopulation, GlobalOptimization.GeneralOptions{D, FVC}}} where {D, FVC}","page":"Home","title":"GlobalOptimization.check_fitness!","text":"check_fitness!(pop::AbstractPopulation, options::Union{GeneralOptions,Val{true},Val{false}})\n\nChecks the fitness of each candidate in the population pop to ensure that it is valid iff options <: Union{GeneralOptions{D,Val{true}}, Val{true}}, otherwise, does nothing.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.dimdelta-Tuple{ContinuousRectangularSearchSpace}","page":"Home","title":"GlobalOptimization.dimdelta","text":"dimdelta(ss::ContinuousRectangularSearchSpace, [i::Integer])\n\nReturns the difference between the maximum and minimum values for the i-th dimension of ss. If i is not specified, returns a vector of all differences.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.dimmax-Tuple{ContinuousRectangularSearchSpace}","page":"Home","title":"GlobalOptimization.dimmax","text":"dimmax(ss::ContinuousRectangularSearchSpace, [i::Integer])\n\nReturns the maximum value for the i-th dimension of ss. If i is not specified, returns a vector of all maximum values.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.dimmin-Tuple{ContinuousRectangularSearchSpace}","page":"Home","title":"GlobalOptimization.dimmin","text":"dimmin(ss::ContinuousRectangularSearchSpace, [i::Integer])\n\nReturns the minimum value for the i-th dimension of ss. If i is not specified,  returns a vector of all minimum values.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.dimrange-Tuple{ContinuousRectangularSearchSpace}","page":"Home","title":"GlobalOptimization.dimrange","text":"dimrange(ss::ContinuousRectangularSearchSpace, [i::Integer])\n\nReturns the range of values for the i-th dimension of ss. If i is not specified, returns a vector of all ranges.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.display_status-Union{Tuple{FVC}, Tuple{D}, Tuple{Any, Any, Any, Any, GlobalOptimization.GeneralOptions{D, FVC}}} where {D, FVC}","page":"Home","title":"GlobalOptimization.display_status","text":"display_status(time, iteration, stall_count, options)\n\nDisplays the status of the PSO algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.enforce_bounds!-Union{Tuple{T}, Tuple{GlobalOptimization.Swarm{T}, ContinuousRectangularSearchSpace{T}}} where T","page":"Home","title":"GlobalOptimization.enforce_bounds!","text":"enforce_bounds!(swarm::Swarm{T}, evaluator::BatchEvaluator)\n\nEnforces the bounds of the search space on each candidate in the swarm swarm. If a candidate\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.evaluate!-Union{Tuple{F}, Tuple{SS}, Tuple{T}, Tuple{GlobalOptimization.AbstractPopulation, GlobalOptimization.SerialBatchEvaluator{T, SS, F}}} where {T, SS, F<:Function}","page":"Home","title":"GlobalOptimization.evaluate!","text":"evaluate!(pop::AbstractPopulation, evaluator::BatchEvaluator)\n\nEvaluates the fitness of a population using the given evaluator.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.evaluate!-Union{Tuple{F}, Tuple{SS}, Tuple{T}, Tuple{GlobalOptimization.FitnessAwareCandidate, GlobalOptimization.BasicEvaluator{T, SS, F}}} where {T, SS, F<:Function}","page":"Home","title":"GlobalOptimization.evaluate!","text":"evaluate!(can::FitnessAwareCandidate, evaluator::BasicEvaluator)\n\nEvaluates the fitness of a candidat using the given evaluator\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.evaluate-Tuple{OptimizationProblem, AbstractArray}","page":"Home","title":"GlobalOptimization.evaluate","text":"evaluate(prob::OptimizationProblem, x::AbstractArray)\n\nEvaluates the objective function f of the optimization problem prob at x.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.evaluate_fitness!-Union{Tuple{T}, Tuple{GlobalOptimization.Swarm{T}, GlobalOptimization.BatchEvaluator{T}}} where T","page":"Home","title":"GlobalOptimization.evaluate_fitness!","text":"evaluate_fitness!(swarm::Swarm{T}, evaluator::BatchEvaluator{T})\n\nEvaluates the fitness of each candidate in the swarm swarm using the evaluator. Updates the swarms best candidates if any are found.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.exprate-Tuple{T} where T<:AbstractFloat","page":"Home","title":"GlobalOptimization.exprate","text":"exprate(λ::AbstractFloat)\n\nGenerate an exponential random variable with rate λ.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.expscale-Tuple{T} where T<:AbstractFloat","page":"Home","title":"GlobalOptimization.expscale","text":"expscale(β::AbstractFloat)\n\nGenerate an exponential random variable with scale β.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.feasible-Union{Tuple{T}, Tuple{AbstractVector{T}, ContinuousRectangularSearchSpace{T}}} where T","page":"Home","title":"GlobalOptimization.feasible","text":"feasible(x, ss::ContinuousRectangularSearchSpace)\n\nReturns true if the point x is feasible in the search space ss, otherwise returns false.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.fitness-Tuple{GlobalOptimization.AbstractPopulation}","page":"Home","title":"GlobalOptimization.fitness","text":"fitness(pop::AbstractPopulation, [i::Integer])\n\nReturns the fitness of the candidates from a population. If i is specified, returns the i-th fitness.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.get_display-Union{Tuple{GlobalOptimization.GeneralOptions{Val{true}, fvc}}, Tuple{fvc}} where fvc","page":"Home","title":"GlobalOptimization.get_display","text":"get_display(opts::AbstractOptions)\n\nReturns the display option from an options type.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.get_display_interval-Tuple{GlobalOptimization.GeneralOptions}","page":"Home","title":"GlobalOptimization.get_display_interval","text":"get_display_interval(opts::AbstractAlgorithmSpecificOptions)\n\nReturns the display interval from an algorithm options type.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.get_function_value_check-Tuple{GlobalOptimization.AbstractAlgorithmSpecificOptions}","page":"Home","title":"GlobalOptimization.get_function_value_check","text":"get_function_value_check(opts::AbstractAlgorithmSpecificOptions)\n\nReturns the function value check option from an algorithm options type.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.get_general-Tuple{GlobalOptimization.AbstractAlgorithmSpecificOptions}","page":"Home","title":"GlobalOptimization.get_general","text":"get_general(opts::AbstractAlgorithmSpecificOptions)\n\nReturns the general options from an algorithm options type.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.get_max_time-Tuple{GlobalOptimization.AbstractAlgorithmSpecificOptions}","page":"Home","title":"GlobalOptimization.get_max_time","text":"get_max_time(opts::AbstractAlgorithmSpecificOptions)\n\nReturns the max time option from an algorithm options type.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.initialize_fitness!-Union{Tuple{T}, Tuple{GlobalOptimization.Swarm{T}, GlobalOptimization.BatchEvaluator{T}}} where T","page":"Home","title":"GlobalOptimization.initialize_fitness!","text":"initialize_fitness!(swarm::Swarm{T}, evaluator::BatchEvaluator{T})\n\nInitializes the fitness of each candidate in the swarm swarm using the evaluator.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.initialize_uniform!-Union{Tuple{T}, Tuple{GlobalOptimization.Swarm{T}, ContinuousRectangularSearchSpace{T}}} where T","page":"Home","title":"GlobalOptimization.initialize_uniform!","text":"initialize_uniform!(swarm::Swarm{T}, search_space::ContinuousRectangularSearchSpace{T})\n\nInitializes the swarm swarm with a uniform particle distribution in the search space. \n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.intersection-Union{Tuple{T2}, Tuple{T1}, Tuple{ContinuousRectangularSearchSpace{T1}, ContinuousRectangularSearchSpace{T2}}} where {T1, T2}","page":"Home","title":"GlobalOptimization.intersection","text":"intersection(ss1, ss2)\n\nReturns the intersection of the two search spaces ss1 and ss2 as a new search sapce\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.laplace-Tuple{T} where T","page":"Home","title":"GlobalOptimization.laplace","text":"laplace(b)\n\nGenerate a Laplace random variable with location 0.0 and scale b.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.laplace-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Home","title":"GlobalOptimization.laplace","text":"laplace([::Type{T}]) where T <: AbstractFloat\n\nGenerate a Laplace random variable with location 0.0 and scale 1.0. If T is specified, the random variable will be of type T.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.laplace-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractFloat","page":"Home","title":"GlobalOptimization.laplace","text":"laplace(μ::AbstractFloat, b::Real)\n\nGenerate a Laplace random variable with location μ and scale b.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.numdims-Tuple{ContinuousRectangularSearchSpace}","page":"Home","title":"GlobalOptimization.numdims","text":"numdims(ss::ContinuousRectangularSearchSpace)\n\nReturns the number of dimensions in the search space ss.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.numdims-Tuple{OptimizationProblem}","page":"Home","title":"GlobalOptimization.numdims","text":"numdims(prob::OptimizationProblem)\n\nReturns the number of dimensions of the decision vector of the optimization problem prob.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.optimize!-Tuple{GlobalOptimization.AbstractOptimizer}","page":"Home","title":"GlobalOptimization.optimize!","text":"optimize!(opt::AbstractOptimizer)\n\nPerform optimization using the optimizer opt. Returns the results of the optimization.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.search_space-Tuple{OptimizationProblem}","page":"Home","title":"GlobalOptimization.search_space","text":"search_space(prob::OptimizationProblem)\n\nReturns the search space of the optimization problem prob.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.set_fitness!-Tuple{GlobalOptimization.AbstractPopulation, Vector}","page":"Home","title":"GlobalOptimization.set_fitness!","text":"set_fitness(pop::AbstractPopulation, fitness, [i::Integer])\n\nSets the fitness of the candidates from a population. If i is specified, sets the i-th fitness.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.set_fitness!-Tuple{GlobalOptimization.FitnessAwareCandidate, Any}","page":"Home","title":"GlobalOptimization.set_fitness!","text":"set_fitness!(candidate,fitness)\n\nSets the fitness of a candidate.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.stalled-Tuple{GlobalOptimization.PSO, Any}","page":"Home","title":"GlobalOptimization.stalled","text":"stalled(pso::PSO, stall_value)\n\nReturns true if the PSO algorithm pso is stalled, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.step!-Tuple{GlobalOptimization.Swarm}","page":"Home","title":"GlobalOptimization.step!","text":"step!(swarm::Swarm)\n\nSteps the swarm swarm forward one iteration.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.update_global_best!-Tuple{GlobalOptimization.PSO}","page":"Home","title":"GlobalOptimization.update_global_best!","text":"update_global_best!(pso::PSO)\n\nUpdates the global best candidate in the PSO algorithm pso if a better candidate is found.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.update_inertia-Tuple{Any, Any, Any}","page":"Home","title":"GlobalOptimization.update_inertia","text":"update_inertia(inertia, range, stall_count)\n\nReturns new inertia weight based on the current 'inertia', the range, and stall_count.\n\n\n\n\n\n","category":"method"},{"location":"#GlobalOptimization.update_velocity!-Union{Tuple{T}, Tuple{GlobalOptimization.Swarm{T}, Vararg{Any, 5}}} where T","page":"Home","title":"GlobalOptimization.update_velocity!","text":"update_velocity!(swarm::Swarm{T}, cache::Cache, ns::Integer, w, y1, y2)\n\nUpdates the velocity of each candidate in the swarm swarm,\n\n\n\n\n\n","category":"method"}]
}
